// backend/models/Message.js
import mongoose from 'mongoose';

const MessageSchema = new mongoose.Schema({
  sender: {
    type: String,
    required: true,
    enum: ['Shivam', 'Arya'], // The user who sent the message
  },
  recipient: {
    type: String,
    required: true,
    enum: ['Shivam', 'Arya'], // The user who should receive the message
  },
  type: {
    type: String,
    required: true,
    enum: ['predefinedMessage', 'customMessage'], // Type of message
  },
  originalText: { // For predefined messages, this stores the base phrase like "Love you"
    type: String,
    required: function() { return this.type === 'predefinedMessage'; }, // Required only if type is predefined
  },
  geminiNote: { // For predefined messages, this stores the note generated by Gemini API
    type: String,
    required: function() { return this.type === 'predefinedMessage'; }, // Required only if type is predefined
  },
  customText: { // For custom messages, this stores the user-typed text
    type: String,
    required: function() { return this.type === 'customMessage'; }, // Required only if type is custom
  },
  timestamp: {
    type: Date,
    default: Date.now, // Timestamp of when the message was created/sent
  },
  read: { // Optional: to track if the message has been read by the recipient
    type: Boolean,
    default: false,
  },
  // You could add a field for the combined text if you often query it,
  // but it can also be constructed on the fly.
  // combinedDisplayText: String,
});

// Indexing for faster queries, e.g., fetching message history
MessageSchema.index({ sender: 1, recipient: 1, timestamp: -1 }); // For fetching chat history between two users
MessageSchema.index({ recipient: 1, read: 1, timestamp: -1 }); // For fetching unread messages for a user

// Ensure sender and recipient are different
MessageSchema.pre('save', function(next) {
  if (this.sender === this.recipient) {
    next(new Error('Sender and recipient cannot be the same.'));
  } else {
    next();
  }
});

const Message = mongoose.model('Message', MessageSchema);

export default Message;
